#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void prepareMatrix(char key[], char matrix[SIZE][SIZE]) {
    int used[26] = {0}, index = 0;
    used['j' - 'a'] = 1;
    for (int i = 0; key[i] != '\0'; ++i) {
        char ch = tolower(key[i]);
        if (isalpha(ch) && !used[ch - 'a']) {
            matrix[index / SIZE][index % SIZE] = ch;
            used[ch - 'a'] = 1;
            index++;
        }
    }
    for (char ch = 'a'; ch <= 'z'; ++ch) {
        if (!used[ch - 'a']) {
            matrix[index / SIZE][index % SIZE] = ch;
            index++;
        }
    }
}
void displayMatrix(char matrix[SIZE][SIZE]) {
    printf("Playfair Matrix:\n");
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            printf("%c ", matrix[i][j]);
        }
        printf("\n");
    }
}
void preprocessText(char text[]) {
    int len = strlen(text), index = 0;
    char result[200];
    for (int i = 0; i < len; ++i) {
        if (isalpha(text[i])) {
            result[index++] = tolower(text[i]);
        }
    }
    result[index] = '\0';
    strcpy(text, result);
    len = strlen(text);
    index = 0;
    for (int i = 0; i < len; i += 2) {
        if (i + 1 < len && text[i] == text[i + 1]) {
            memmove(&text[i + 1], &text[i], len - i);
            text[i + 1] = 'x';
            len++;
        }
        if (i + 1 == len) {
            text[len] = 'x';
            text[len + 1] = '\0';
        }
    }
}
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void encryptPlayfair(char text[], char matrix[SIZE][SIZE]) {
    for (int i = 0; text[i] != '\0'; i += 2) {
        int r1, c1, r2, c2;
        findPosition(matrix, text[i], &r1, &c1);
        findPosition(matrix, text[i + 1], &r2, &c2);
        if (r1 == r2) { 
            text[i] = matrix[r1][(c1 + 1) % SIZE];
            text[i + 1] = matrix[r2][(c2 + 1) % SIZE];
        } else if (c1 == c2) { 
            text[i] = matrix[(r1 + 1) % SIZE][c1];
            text[i + 1] = matrix[(r2 + 1) % SIZE][c2];
        } else { 
            text[i] = matrix[r1][c2];
            text[i + 1] = matrix[r2][c1];
        }
    }
}
int main() {
    char key[100], text[200], matrix[SIZE][SIZE];
    printf("Enter the keyword: ");
    gets(key);
    printf("Enter the plaintext: ");
    gets(text);
    prepareMatrix(key, matrix);
    displayMatrix(matrix);
    preprocessText(text);
    printf("Preprocessed text: %s\n", text);
    encryptPlayfair(text, matrix);
    printf("Encrypted text: %s\n", text);
    return 0;
}
