#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define ALPHABET_LEN 26
void generateCipher(const char *keyword, char cipher[ALPHABET_LEN + 1]) {
    int used[ALPHABET_LEN] = {0};
    int index = 0;
    for (int i = 0; keyword[i] != '\0'; i++) {
        char ch = toupper(keyword[i]);
        if (!used[ch - 'A']) {
            cipher[index++] = ch;
            used[ch - 'A'] = 1;
        }
    }
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            cipher[index++] = ch;
        }
    }
    cipher[index] = '\0';
}
void encrypt(const char *plaintext, const char *cipher, char *encrypted) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            encrypted[i] = cipher[toupper(plaintext[i]) - 'A'];
            if (islower(plaintext[i])) {
                encrypted[i] = tolower(encrypted[i]);
            }
        } else {
            encrypted[i] = plaintext[i]; 
        }
    }
    encrypted[strlen(plaintext)] = '\0';
}
void decrypt(const char *ciphertext, const char *cipher, char *decrypted) {
    char reverseCipher[ALPHABET_LEN];
    for (int i = 0; i < ALPHABET_LEN; i++) {
        reverseCipher[cipher[i] - 'A'] = 'A' + i;
    }
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            decrypted[i] = reverseCipher[toupper(ciphertext[i]) - 'A'];
            if (islower(ciphertext[i])) {
                decrypted[i] = tolower(decrypted[i]);
            }
        } else {
            decrypted[i] = ciphertext[i]; 
        }
    }
    decrypted[strlen(ciphertext)] = '\0';
}

int main() {
    char keyword[] = "CIPHER";
    char cipher[ALPHABET_LEN + 1];
    char plaintext[256];
    char encrypted[256];
    char decrypted[256];
    generateCipher(keyword, cipher);
    printf("Generated Cipher Sequence: %s\n", cipher);
    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; 
    encrypt(plaintext, cipher, encrypted);
    printf("Encrypted Text: %s\n", encrypted);
    decrypt(encrypted, cipher, decrypted);
    printf("Decrypted Text: %s\n", decrypted);
    return 0;
}
