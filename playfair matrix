#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void prepareMatrix(char key[], char matrix[SIZE][SIZE]) {
    int used[26] = {0}, index = 0;
    used['j' - 'a'] = 1;
    for (int i = 0; key[i] != '\0'; ++i) {
        char ch = tolower(key[i]);
        if (isalpha(ch) && !used[ch - 'a']) matrix[index / SIZE][index++ % SIZE] = (used[ch - 'a'] = ch);
    }
    for (char ch = 'a'; ch <= 'z'; ++ch) if (!used[ch - 'a']) matrix[index / SIZE][index++ % SIZE] = ch;
}
void preprocessText(char text[]) {
    char result[200];
    int len = strlen(text), index = 0;
    for (int i = 0; i < len; ++i) if (isalpha(text[i])) result[index++] = tolower(text[i]);
    result[index] = '\0';
    for (int i = 0; i < index; i += 2) {
        if (i + 1 < index && result[i] == result[i + 1]) memmove(&result[i + 1], &result[i], index++ - i), result[i + 1] = 'x';
        if (i + 1 == index) result[index++] = 'x';
    }
    result[index] = '\0';
    strcpy(text, result);
}
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    for (int i = 0; i < SIZE; ++i) for (int j = 0; j < SIZE; ++j) if (matrix[i][j] == ch) { *row = i; *col = j; return; }
}
void encryptPlayfair(char text[], char matrix[SIZE][SIZE]) {
    for (int i = 0; text[i] != '\0'; i += 2) {
        int r1, c1, r2, c2;
        findPosition(matrix, text[i], &r1, &c1);
        findPosition(matrix, text[i + 1], &r2, &c2);
        text[i] = r1 == r2 ? matrix[r1][(c1 + 1) % SIZE] : c1 == c2 ? matrix[(r1 + 1) % SIZE][c1] : matrix[r1][c2];
        text[i + 1] = r1 == r2 ? matrix[r2][(c2 + 1) % SIZE] : c1 == c2 ? matrix[(r2 + 1) % SIZE][c2] : matrix[r2][c1];
    }
}
int main() {
    char key[100], text[200], matrix[SIZE][SIZE];
    printf("Enter the keyword: ");
    gets(key);
    printf("Enter the plaintext: ");
    gets(text);
    prepareMatrix(key, matrix);
    preprocessText(text);
    encryptPlayfair(text, matrix);
    printf("Encrypted text: %s\n", text);
    return 0;
}
