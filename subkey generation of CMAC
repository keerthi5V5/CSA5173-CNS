#include <stdio.h>
#include <string.h>
#define BLOCK_SIZE_128 16
#define BLOCK_SIZE_64 8 
#define CONSTANT_128 0x87
#define CONSTANT_64 0x1B
void left_shift(unsigned char *block, int size) {
    unsigned char carry = 0;
    for (int i = 0; i < size; ++i) {
        unsigned char new_carry = block[i] >> 7;
        block[i] = (block[i] << 1) | carry;
        carry = new_carry;
    }
}
void xor_with_constant(unsigned char *block, unsigned char constant, int size) {
    block[size - 1] ^= constant;
}
void print_block(unsigned char *block, int size) {
    for (int i = 0; i < size; i++) {
        printf("%02x", block[i]);
    }
    printf("\n");
}
void cmac_subkey_generation(unsigned char *key, int block_size, unsigned char *K1, unsigned char *K2) {
    unsigned char zero_block[BLOCK_SIZE_128] = {0};  
    unsigned char temp_block[BLOCK_SIZE_128];
    memcpy(temp_block, zero_block, block_size);
    left_shift(temp_block, block_size);
    if (temp_block[0] & 0x80) {  
        xor_with_constant(temp_block, block_size == BLOCK_SIZE_128 ? CONSTANT_128 : CONSTANT_64, block_size);
    }
    memcpy(K1, temp_block, block_size);
    left_shift(K1, block_size);
    if (K1[0] & 0x80) {  
        xor_with_constant(K1, block_size == BLOCK_SIZE_128 ? CONSTANT_128 : CONSTANT_64, block_size);
    }
    memcpy(K2, K1, block_size);
}

int main() {
    unsigned char K1_128[BLOCK_SIZE_128], K2_128[BLOCK_SIZE_128];
    unsigned char K1_64[BLOCK_SIZE_64], K2_64[BLOCK_SIZE_64];
    cmac_subkey_generation(NULL, BLOCK_SIZE_128, K1_128, K2_128);
    printf("For 128-bit block size (AES):\n");
    printf("K1: ");
    print_block(K1_128, BLOCK_SIZE_128);
    printf("K2: ");
    print_block(K2_128, BLOCK_SIZE_128);
    cmac_subkey_generation(NULL, BLOCK_SIZE_64, K1_64, K2_64);
    printf("\nFor 64-bit block size:\n");
    printf("K1: ");
    print_block(K1_64, BLOCK_SIZE_64);
    printf("K2: ");
    print_block(K2_64, BLOCK_SIZE_64);

    return 0;
}
